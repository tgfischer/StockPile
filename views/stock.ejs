
<!DOCTYPE html>
<html>
<head>
  <!-- Standard Meta -->
  <meta charset="utf-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
  <link rel="icon" href="/images/favicon.ico" type="image/x-icon">

  <link href="https://fonts.googleapis.com/css?family=Lato:300,400,700" rel="stylesheet">

  <!-- Site Properties -->
  <title>Stock Pile</title>
  <link rel="stylesheet" type="text/css" href="/semantic/semantic.min.css">
  <link rel="stylesheet" type="text/css" href="/css/styles.css">
  <link rel="stylesheet" type="text/css" href="/css/stock.css">
</head>
<body class="light-text">
  <% include common/mobile-nav %>

  <!-- Page Contents -->
  <div class="pusher">
    <div class="ui inverted vertical segment">
      <% include common/nav %>
    </div>
    <div class="ui main vertical inverted stripe segment">
      <div class="ui middle aligned stackable grid container">
        <div class="row">
          <div class="column">
            <div class="ui big inverted breadcrumb">
              <i class="left chevron icon divider"></i>
              <a href="/" class="section">Back</a>
            </div>
          </div>
        </div>
        <div class="row">
          <div class="title column">
            <h1 class="ui huge inverted header">
              <%= company.name %>
              <div class="medium sub header">
                <div class="ui grid">
                  <div class="row">
                    <div class="three wide column">
                      Symbol: <%= company.symbol %>
                    </div>
                    <div class="four wide column">
                      Current Sale Price: $<%= company.price %>
                    </div>
                    <% if (user) { %>
                      <div class="four wide column">
                        Amount Owned: <%= amountOwned %>
                      </div>
                    <% } %>
                    <div class="five wide column">
                      Percent Change:
                      <% if(company.change < 0) { %>
                        <div style="margin-left: 0.5em; padding: 0.3em 0.55em; display: inline;" class="ui message span-full-red"><%= company.change %>% </div>
                      <% } else if (company.change > 0) { %>
                        <div style="margin-left: 0.5em; padding: 0.3em 0.55em; display: inline;" class="ui message span-full-green"><%= company.change %>% </div>
                      <% } %>
                    </div>
                  </div>
                </div>
              </div>
            </h1>
          </div>
        </div>
        <% if (user) { %>
          <div class="row">
            <div class="three wide column">
              <button class="ui big fluid green buy button">Buy</button>
            </div>
            <div class="three wide column">
              <button class="ui big <% if (!user.stocks.filter(function(stock) { return stock.company._id === company._id }).length == 0) { %>disabled<% } %> fluid secondary inverted sell button">
                Sell
              </button>
            </div>
          </div>
        <% } %>
        <div class="padding-top row">
          <div class="title column">
            <h3 class="ui large inverted header">
              Sentiment Information
            </h3>
          </div>
        </div>
        <div class="row">
          <div class="title column">
            <div id="graph-loader" class="ui big text active loader">Analyzing News...</div>
            <canvas class="chart"></canvas>
          </div>
        </div>
      </div>
    </div>
  </div>
  <% include common/buySellStocks %>
  <script>
    // The following converts the "company" variable which this page is specific for, into a JavaScript variable to be used in the script.
    function htmlDecode(input){
      var e = document.createElement('div');
      e.innerHTML = input;
      return e.childNodes.length === 0 ? "" : e.childNodes[0].nodeValue;
    }
    var comp = JSON.parse(htmlDecode("<%= JSON.stringify(company) %>"));
  </script>
  <script type="text/javascript" language="javascript" src="https://code.jquery.com/jquery-3.1.1.min.js"></script>
  <script type="text/javascript" language="javascript" src="/semantic/semantic.min.js"></script>
  <script type="text/javascript" language="javascript" src="/js/moment.min.js"></script>
  <script type="text/javascript" language="javascript" src="/js/chart.min.js"></script>
  <script>
  $(document).ready(function() {
    // create sidebar and attach to menu open
    $('.ui.sidebar').sidebar('attach events', '.toc.item');

    <% if (user) { %>
      var user = <%- JSON.stringify(user) %>;
    <% } else { %>
      var user = null;
    <% } %>

    var companyObj = <%- JSON.stringify(company) %>

    <% include common/buySellStocksScripts %>

    // Make request to server for the
    Chart.defaults.global.defaultFontColor = "#FFFFFF";
    Chart.defaults.global.defaultFontSize = 15;

    // First thing we should do is check this company's "lastUpdated" field. If it is more than a day old, we should redo the
    // sentiment query and add recent results. When result is true, we need to get more sentiment results.
    consultLastUpdated(comp, function() {
      renderGraphData(comp, function(renderData, history) {
        var ctx = $('.chart');
        var chart = Chart.Line(ctx, {
          data: {
            datasets: [{
              label: 'News Sentiment',
              yAxisID: "y-axis-1",
              borderColor: 'rgba(0, 200, 83, 1)',
              pointBorderColor: 'rgba(0, 230, 118, 1)',
              pointBackgroundColor: 'rgba(0, 230, 118, 1)',
              borderWidth: 1,
              data: renderData,
              backgroundColor: 'rgba(0, 0, 0, 0)'
            },{
              label: 'Stock History',
              yAxisID: "y-axis-2",
              borderColor: 'rgba(33, 150, 243, 1)',
              pointBorderColor: 'rgba(33, 150, 243, 1)',
              pointBackgroundColor: 'rgba(33, 150, 243, 1)',
              borderWidth: 1,
              data: history,
              backgroundColor: 'rgba(0, 0, 0, 0)'
            }]
          },
          options: {
            lineTension: 0,
            animation: false,
            scales: {
              xAxes: [{
                type: 'time',
                time: {
                  displayFormats: {
                     'millisecond': 'MMM DD',
                     'second': 'MMM DD',
                     'minute': 'MMM DD',
                     'hour': 'MMM DD',
                     'day': 'MMM DD',
                     'week': 'MMM DD',
                     'month': 'MMM DD',
                     'quarter': 'MMM DD',
                     'year': 'MMM DD',
                  }
                },
                position: 'bottom',
                gridLines: {
                  color: 'rgba(255, 255, 255, 0.05)',
                  zeroLineColor: 'rgba(255, 255, 255, 0.15)'
                },
                scaleLabel: {
                  display: true,
                  labelString: 'Week of Analysis'
                }
              }],
              yAxes: [{
                type: "linear",
                display: true,
  							position: "left",
  							id: "y-axis-1",
                gridLines: {
                  color: 'rgba(255, 255, 255, 0.05)',
                  zeroLineColor: 'rgba(255, 255, 255, 0.15)'
                },
                scaleLabel: {
                  display: true,
                  labelString: 'Sentiment Value'
                },
                ticks: {
                  max: 2,
                  min: -2
                }
              }, {
                type: "linear",
                display: true,
  							position: "right",
  							id: "y-axis-2",
                scaleLabel: {
                  display: true,
                  labelString: 'Stock Price (USD)'
                },
                ticks: {
                  callback: function(label, index, labels) {
                    return '$' + label;
                  }
                }
              }]
            },
            legend: {
              display: false
            }
          }
        });
      });   // end renderGraphData callback
    });     // end consultLastUpdated callback
  });       // end document ready

  function consultLastUpdated(comp, callback) {
    var update = false;
    var lastUpdated = comp.lastUpdated;
    if (!lastUpdated) {
      update = true; // lastUpdated will be null if we have never updated the sentiment results
    } else {
      lastUpdated = new Date(lastUpdated);
      // If lastUpdated exists, we must compare it with the current time. If time > 1 day, return true to get some new results
      var currentDate = new Date();

      var timeDiff = Math.abs(currentDate.getTime() - lastUpdated.getTime());
      var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));

      if (diffDays > 1) {
        update = true;
      } else {
        update = false;
      }
    }

    if (update) {
      $.ajax({
        url: "/stock/sentiment/" + comp._id,
        method: "GET",
        success: function(data) {
          $("#graph-loader").removeClass("active");
          callback();
        }
      });
    } else {
      // We should update the finance stats
      $.ajax({
        url: "/update/pricing/" + comp._id,
        method: "GET",
        success: function(data) {
          console.log("Updated stock price and percent change!");
        }
      });
      $("#graph-loader").removeClass("active");
      callback();
    }
  }

  function renderGraphData(comp, callback) {
    $.ajax({
      url:"/stock/update/" + comp.symbol,
      method: "GET",
      success: function(newCompany) {
        $.ajax({
          url: "/stock/sentiment",
          method: "POST",
          data: {
            sentiments: newCompany.sentiments
          },
          success: function (sentiments) {
            var company_data = [];
            var map = {};

            for (var i = 0; i < sentiments.length; i++) {
              var date = moment(sentiments[i].date).format('MM/DD/YYYY');

              if (map[date]) {
                map[date].score += sentiments[i].score;
                map[date].count++;
              } else {
                var handled = false;

                for (var entry in map) {
                  var a = moment(sentiments[i].date);
                  var b = moment(entry);

                  if (Math.abs(moment.duration(a.diff(b)).asDays()) < 2) {
                    map[entry].score += sentiments[i].score;
                    map[entry].count++;
                    handled = true;

                    break;
                  }
                }

                if (!handled) {
                  map[date] = {
                    score: sentiments[i].score,
                    date: sentiments[i].date,
                    count: 1
                  };
                }
              }
            }

            for (var entry in map) {
              company_data.push({
                x: entry,
                y: (map[entry].score / map[entry].count).toFixed(2)
              });
            }

            company_data = company_data.sort(function(a, b) {
              return a.x < b.x;
            });

            var history = <%- JSON.stringify(history); %>
            var historyData = [];

            for (var i = 0; i < history.length; i++) {
              historyData.push({
                x: history[i].Date,
                y: history[i].Open
              });
            }

            callback(company_data, historyData);
          }
        });
      }
    });
  }
  </script>

</body>

</html>
